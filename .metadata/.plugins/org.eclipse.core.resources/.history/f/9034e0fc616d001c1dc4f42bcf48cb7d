package linkedList;

import linkedList.Reverse.Node;

public class PalindromeLL {
	static Node head;
	class Node{
		int data;
		Node next;
		Node(int data){
			this.data = data;
			this.next = null;
		}
	}
	public void addFirst(int data) {
		Node newNode = new Node(data);
		if(head==null) {
			head = newNode;
			return;
		}
		newNode.next = head;
		head = newNode;
	}
	public void addLast(int data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = newNode;
			return;
		}
		Node currNode = head;
		while(currNode.next!=null) {
			currNode = currNode.next;
		}
		currNode.next = newNode;
	}
	public void printList() {
		Node curr = head;
		while(curr!=null) {
			System.out.print(curr.data+"->");
			curr = curr.next;
		}
		System.out.print("NULL");
		System.out.println();
	}
	public int size() {
		int size = 0;
		Node currNode = head;
		while(currNode!=null) {
			size++;
			currNode = currNode.next;
		}
		return size;
	}
	public Node Reverse(Node node) {
		Node prev = null;
		Node current = node;
		Node next = null;
		while(current!=null) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		node = prev;
		return node;
		
		
	}
	public boolean checkPalindrome() {
		PalindromeLL ll = new PalindromeLL();
		boolean check = false;
		Node newHead = head;
		Node first = head;
		int size = ll.size();
		int mid = size/2;
		int idx = 0;
		while(idx!=mid) {
			newHead = newHead.next;
			idx++;
		}
		return check;
	}
	public static void main(String[] args) {
		PalindromeLL ll = new PalindromeLL();
		ll.addFirst(1);
		ll.addLast(2);
		ll.addLast(3);
		ll.addLast(4);
		ll.addLast(5);
		ll.printList();
		ll.checkPalindrome();
		ll.Reverse(head);
		ll.printList();
	}

}
